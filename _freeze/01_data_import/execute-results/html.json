{
  "hash": "5bac7f0e102d0df15cf17696d1fc7940",
  "result": {
    "markdown": "---\ntitle: \"01 Data Import\"\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n# Import the expression matrix\n\nThe expression matrix is a table storing the expression value of bioproducts (gene or protein). Depending on the experimental setup, you will find gene expression and / or protein expression values in the expression matrix.\n\nExpression matrix is stored in CSV.\n\n::: callout-note\nCSV is the output of V1 pipeline. If you run the V2 pipeline, the expression matrix is pre-imported in Seurat object.\n:::\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-2_251c3814020723127ae5db9c2b060a2e'}\n\n```{.r .cell-code}\nexpMat <- fread(file = \"data/raw_data/Demo-WTA-AbSeq.csv\", sep = \",\", header=TRUE) %>% \n  data.frame(row.names = 1)\n```\n:::\n\n\nBy default, the expression matrix is organized: rows as cell indexes, and columns as bioproducts.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-3_f1cd454c672856b93b1ff3c122541484'}\n::: {.cell-output .cell-output-stdout}\n```\n         A1BG A1BG.AS1 A1CF A2M A2M.AS1\n3261781     0        0    0   0       0\n9155806     0        0    0   0       0\n4304661     0        0    0   0       0\n2216902     0        0    0   0       0\n13160139    0        0    0   0       0\n```\n:::\n:::\n\n\n::: callout-important\n## Question\n\nWhy are many zeros \"0\" in the expression matrix?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\nscRNA-seq usually contains many zeros. The reasons are:\n\n-   Stochastic gene expression\n\n-   Limitation of single cell technology: On average, 5-8% of mRNA transcripts can be captured\n:::\n\nThe expression matrix has two groups of bioproducts: gene expression and protein expression (AbSeq).\n\nGene and AbSeq are analyzed separately. We separate gene UMIs and AbSeq UMIs, and store them in separate data frames.\n\n::: callout-note\nAbSeq has **pAbO** in the name. We can use **pAbO** as the key word to select AbSeq.\n:::\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-4_209f16e99b556bc110981032e227cbb5'}\n\n```{.r .cell-code}\nrna <- dplyr::select(expMat, !grep(\"pAbO\", colnames(expMat), value = T))\nab <- dplyr::select(expMat, grep(\"pAbO\", colnames(expMat), value = T))\n```\n:::\n\n\n# Create Seurat object\n\nSeurat requires the expression matrix to have a specific format: - Each row as a bioproduct - Each column as a cell - Bioproduct name as row name\n\nThe arrangement of rows and columns of Seurat object is different from the expression matrix. We need to transpose the expression matrix.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-5_06a5dbab28d4ff7d3c94d47c8193d577'}\n\n```{.r .cell-code}\n# transpose data\nrna <- data.frame(t(rna), check.names = FALSE)\nab <- data.frame(t(ab), check.names = FALSE)\n```\n:::\n\n\nAfter transposing, the expression matrix has each row as a bioproduct and each column as a cell.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-6_5b9a18897034949d1985f05606be45cd'}\n::: {.cell-output .cell-output-stdout}\n```\n         3261781 9155806 4304661 2216902 13160139\nA1BG           0       0       0       0        0\nA1BG.AS1       0       0       0       0        0\nA1CF           0       0       0       0        0\nA2M            0       0       0       0        0\nA2M.AS1        0       0       0       0        0\n```\n:::\n:::\n\n\n::: callout-important\n## Question\n\nCompare \\`expMat\\` before and after transposition. Do you notice the difference?\n:::\n\nThe gene expression now is stored in `rna`. It is ready to create a Seurat object to store gene expression.\n\nWe will first focus on gene expression. AbSeq will be covered in the chapter of \"Combining scRNA-seq and AbSeq\".\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-7_ba85d2f0f37e083392b07ea6bdae1c29'}\n\n```{.r .cell-code}\nseuratObj <- CreateSeuratObject(counts = rna, \n                                min.cells = 1, \n                                min.features = 100, \n                                assay = \"RNA\")\n```\n:::\n\n\n`min.cells` Specify the minimum number of cells that need to be detected per feature. Setting this argument will filter out zero or lowly expressed features.\n\n`min.features` Specify the minimum number of features that need to be detected per cell. Setting this argument will filter out cell indexes with random counts but without any cell present.\n\n`assay` Specify the name of the created assay. By default, it is \"RNA\".\n\n::: callout-important\n## Question\n\n\\`CreateSeuratObject\\` has many arguments. These arguments allow users to control the behavior of function.\n\nHow to check what arguments the function has?\n:::\n\n::: {.callout-tip collapse=\"T\"}\n## Answer\n\nRStudio provides the tab \"Help\" (bottom right window). Search the function and read the documentation.\n:::\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data` slot.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-8_def89857049c11b00a3ed0cbe8ce89fc'}\n\n```{.r .cell-code}\nseuratObj@meta.data %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            orig.ident nCount_RNA nFeature_RNA\n3261781  SeuratProject      35231         5823\n9155806  SeuratProject      34733         5943\n4304661  SeuratProject      33238         5480\n2216902  SeuratProject      31618         5573\n13160139 SeuratProject      31664         5592\n11951658 SeuratProject      30786         5457\n```\n:::\n:::\n\n\n`meta.data` is handy for storing information of every cell. We will add more information into the `meta.data` later. By now, it contains three columns:\n\n`orig.ident` Sample identity or sample name. By default, it is `SeuratProject`.\n\n`nCount_RNA` UMI counts per gene per cell\n\n`nFeature_RNA` Genes counts per cell\n\n# Add cell assignment into `meta.data`\n\nThe demo experiment uses Sample Multiplexing Kit to pool two samples in one cartridge.\n\nTo demultiplex the samples, we need to use Demo-WTA-AbSeq-SMK_Sample_Tag_Calls.csv.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-9_0ff07d96396c983bbc236e960306e4f8'}\n\n```{.r .cell-code}\ncell_assign <- fread(file = \"data/raw_data/Demo-WTA-AbSeq-SMK_Sample_Tag_Calls.csv\", sep = \",\", header=TRUE) %>% \n  data.frame(row.names = 1)\n```\n:::\n\n\nIt is a table with three columns:\n\nCell Index: Index of cell\n\nSample_Tag: Which tag the cell belongs to\n\nSample_Name: Which sample the cell belongs to\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-10_77e0f6e6d66bcee794c25671143a0b86'}\n\n```{.r .cell-code}\ncell_assign[1:5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Sample_Tag Sample_Name\n3261781  SampleTag02_hs   activated\n9155806  SampleTag02_hs   activated\n4304661       Multiplet   Multiplet\n2216902  SampleTag02_hs   activated\n13160139 SampleTag02_hs   activated\n```\n:::\n:::\n\n\nWe can add the cell assignment into the `meta.data` of Seurat object by `AddMetaData`.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-11_d0d9f83eed50e2f83fba3e487969f350'}\n\n```{.r .cell-code}\nseuratObj <- AddMetaData(object = seuratObj, metadata = cell_assign)\n```\n:::\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-12_398be1ba68a1a144c10f0f68d8783ab0'}\n\n```{.r .cell-code}\nseuratObj@meta.data %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n3261781  SeuratProject      35231         5823 SampleTag02_hs   activated\n9155806  SeuratProject      34733         5943 SampleTag02_hs   activated\n4304661  SeuratProject      33238         5480      Multiplet   Multiplet\n2216902  SeuratProject      31618         5573 SampleTag02_hs   activated\n13160139 SeuratProject      31664         5592 SampleTag02_hs   activated\n11951658 SeuratProject      30786         5457 SampleTag02_hs   activated\n```\n:::\n:::\n\n\n# Remove Multiplet and Undetermined\n\nWe expect around 2000 cells in each sample in the demo data.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-13_4816e61ac8efeafff866c4eb05d52975'}\n\n```{.r .cell-code}\nseuratObj@meta.data %>% \n  \tggplot(aes(x=Sample_Name, fill=Sample_Name)) + \n  \tgeom_bar() +\n  \ttheme_classic() +\n  \tggtitle(\"Sample_Name\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\n::: {.cell-output-display}\n![](01_data_import_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nCells in Multiplet and Undetermined can be removed from the downstream analysis by `subset`.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-14_9188109ba11e88d4aaaa58d738f0a972'}\n\n```{.r .cell-code}\nseuratObj <- subset(seuratObj, subset = Sample_Name %in% c(\"activated\", \"naive\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}