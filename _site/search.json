[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "single-cell-boot-camp",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "01_data_import.html",
    "href": "01_data_import.html",
    "title": "01 Data Import",
    "section": "",
    "text": "Import the expression matrix\nThe expression matrix is a table storing the expression value of bioproducts (gene or protein). Depending on the experimental setup, you will find gene expression and / or protein expression values in the expression matrix.\nExpression matrix is stored in CSV.\n\n\n\n\n\n\nNote\n\n\n\nCSV is the output of V1 pipeline. If you run the V2 pipeline, the expression matrix is pre-imported in Seurat object.\n\n\n\nexpMat &lt;- fread(file = \"data/raw_data/Demo-WTA-AbSeq.csv\", sep = \",\", header=TRUE) %&gt;% \n  data.frame(row.names = 1)\n\nBy default, the expression matrix is organized: rows as cell indexes, and columns as bioproducts.\n\n\n         A1BG A1BG.AS1 A1CF A2M A2M.AS1\n3261781     0        0    0   0       0\n9155806     0        0    0   0       0\n4304661     0        0    0   0       0\n2216902     0        0    0   0       0\n13160139    0        0    0   0       0\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhy are many zeros “0” in the expression matrix?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nscRNA-seq usually contains many zeros. The reasons are:\n\nStochastic gene expression\nLimitation of single cell technology: On average, 5-8% of mRNA transcripts can be captured\n\n\n\n\nThe expression matrix has two groups of bioproducts: gene expression and protein expression (AbSeq).\nGene and AbSeq are analyzed separately. We separate gene UMIs and AbSeq UMIs, and store them in separate data frames.\n\n\n\n\n\n\nNote\n\n\n\nAbSeq has pAbO in the name. We can use pAbO as the key word to select AbSeq.\n\n\n\nrna &lt;- dplyr::select(expMat, !grep(\"pAbO\", colnames(expMat), value = T))\nab &lt;- dplyr::select(expMat, grep(\"pAbO\", colnames(expMat), value = T))\n\n\n\nCreate Seurat object\nSeurat requires the expression matrix to have a specific format: - Each row as a bioproduct - Each column as a cell - Bioproduct name as row name\nThe arrangement of rows and columns of Seurat object is different from the expression matrix. We need to transpose the expression matrix.\n\n# transpose data\nrna &lt;- data.frame(t(rna), check.names = FALSE)\nab &lt;- data.frame(t(ab), check.names = FALSE)\n\nAfter transposing, the expression matrix has each row as a bioproduct and each column as a cell.\n\n\n         3261781 9155806 4304661 2216902 13160139\nA1BG           0       0       0       0        0\nA1BG.AS1       0       0       0       0        0\nA1CF           0       0       0       0        0\nA2M            0       0       0       0        0\nA2M.AS1        0       0       0       0        0\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nCompare `expMat` before and after transposition. Do you notice the difference?\n\n\nThe gene expression now is stored in rna. It is ready to create a Seurat object to store gene expression.\nWe will first focus on gene expression. AbSeq will be covered in the chapter of “Combining scRNA-seq and AbSeq”.\n\nseuratObj &lt;- CreateSeuratObject(counts = rna, \n                                min.cells = 1, \n                                min.features = 100, \n                                assay = \"RNA\")\n\nmin.cells Specify the minimum number of cells that need to be detected per feature. Setting this argument will filter out zero or lowly expressed features.\nmin.features Specify the minimum number of features that need to be detected per cell. Setting this argument will filter out cell indexes with random counts but without any cell present.\nassay Specify the name of the created assay. By default, it is “RNA”.\n\n\n\n\n\n\nQuestion\n\n\n\n`CreateSeuratObject` has many arguments. These arguments allow users to control the behavior of function.\nHow to check what arguments the function has?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nRStudio provides the tab “Help” (bottom right window). Search the function and read the documentation.\n\n\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the meta.data slot.\n\nseuratObj@meta.data %&gt;% head()\n\n            orig.ident nCount_RNA nFeature_RNA\n3261781  SeuratProject      35231         5823\n9155806  SeuratProject      34733         5943\n4304661  SeuratProject      33238         5480\n2216902  SeuratProject      31618         5573\n13160139 SeuratProject      31664         5592\n11951658 SeuratProject      30786         5457\n\n\nmeta.data is handy for storing information of every cell. We will add more information into the meta.data later. By now, it contains three columns:\norig.ident Sample identity or sample name. By default, it is SeuratProject.\nnCount_RNA UMI counts per gene per cell\nnFeature_RNA Genes counts per cell\n\n\nAdd cell assignment into meta.data\nThe demo experiment uses Sample Multiplexing Kit to pool two samples in one cartridge.\nTo demultiplex the samples, we need to use Demo-WTA-AbSeq-SMK_Sample_Tag_Calls.csv.\n\ncell_assign &lt;- fread(file = \"data/raw_data/Demo-WTA-AbSeq-SMK_Sample_Tag_Calls.csv\", sep = \",\", header=TRUE) %&gt;% \n  data.frame(row.names = 1)\n\nIt is a table with three columns:\nCell Index: Index of cell\nSample_Tag: Which tag the cell belongs to\nSample_Name: Which sample the cell belongs to\n\ncell_assign[1:5, ]\n\n             Sample_Tag Sample_Name\n3261781  SampleTag02_hs   activated\n9155806  SampleTag02_hs   activated\n4304661       Multiplet   Multiplet\n2216902  SampleTag02_hs   activated\n13160139 SampleTag02_hs   activated\n\n\nWe can add the cell assignment into the meta.data of Seurat object by AddMetaData.\n\nseuratObj &lt;- AddMetaData(object = seuratObj, metadata = cell_assign)\n\n\nseuratObj@meta.data %&gt;% head()\n\n            orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n3261781  SeuratProject      35231         5823 SampleTag02_hs   activated\n9155806  SeuratProject      34733         5943 SampleTag02_hs   activated\n4304661  SeuratProject      33238         5480      Multiplet   Multiplet\n2216902  SeuratProject      31618         5573 SampleTag02_hs   activated\n13160139 SeuratProject      31664         5592 SampleTag02_hs   activated\n11951658 SeuratProject      30786         5457 SampleTag02_hs   activated\n\n\n\n\nRemove Multiplet and Undetermined\nWe expect around 2000 cells in each sample in the demo data.\n\nseuratObj@meta.data %&gt;% \n    ggplot(aes(x=Sample_Name, fill=Sample_Name)) + \n    geom_bar() +\n    theme_classic() +\n    ggtitle(\"Sample_Name\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nCells in Multiplet and Undetermined can be removed from the downstream analysis by subset.\n\nseuratObj &lt;- subset(seuratObj, subset = Sample_Name %in% c(\"activated\", \"naive\"))"
  },
  {
    "objectID": "02_quality_control.html",
    "href": "02_quality_control.html",
    "title": "02 Quality Control",
    "section": "",
    "text": "When creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data` slot.\n\nseuratObj@meta.data %&gt;% head()\n\n            orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n3261781  SeuratProject      35231         5823 SampleTag02_hs   activated\n9155806  SeuratProject      34733         5943 SampleTag02_hs   activated\n2216902  SeuratProject      31618         5573 SampleTag02_hs   activated\n13160139 SeuratProject      31664         5592 SampleTag02_hs   activated\n11951658 SeuratProject      30786         5457 SampleTag02_hs   activated\n10029404 SeuratProject      31428         5401 SampleTag02_hs   activated\n\n\norig.ident Sample identity or sample name. By default, it is “SeuratProject”. nCount_RNA UMI counts per cell. nFeature_RNA Gene counts per cell. Sample_Tag a cell is from which sample tag. Sample_Name a cell is from which sample.\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is the purpose of quality control?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nQuality control is to filter out cells that are of low quality, e.g. dead cells.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nHow to perform quality control on scRNA-seq?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nThe quality control of whole transcriptome analysis (WTA) relies on three quality metrics: nCount_RNA, nFeature_RNA, and mitochondrial percentage (percentage of UMIs to mitochondrial genes in a cell).\nLow quality cells have the below characteristics:\n\nsmall number of UMIs (nCount_RNA is low)\nsmall number of genes (nFeature_RNA is low)\nhigh mitochondrial percentage (mitochondrial percentage is high)\n\nIn practice, we look at the distribution of quality metrics in cell population and set appropriate cutoff to filter out low quality cells.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe targeted assay contains genes of interest. Mitochondrial genes are usually not included in the gene panel of targeted assay.\nTherefore, the quality control of targeted assays relies on two metrics: nCount_RNA and nFeature_RNA."
  },
  {
    "objectID": "02_quality_control.html#ncount_rna-umi-counts-per-cell",
    "href": "02_quality_control.html#ncount_rna-umi-counts-per-cell",
    "title": "02 Quality Control",
    "section": "\nnCount_RNA UMI counts per cell",
    "text": "nCount_RNA UMI counts per cell\nWe look at nCount_RNA for the total number of UMI counts per cell. Generally, we expect a valid cell with at least 500 UMI counts.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  geom_vline(xintercept = 500) +\n  ggtitle(\"nCount_RNA\")"
  },
  {
    "objectID": "02_quality_control.html#nfeature_rna-gene-counts-per-cell",
    "href": "02_quality_control.html#nfeature_rna-gene-counts-per-cell",
    "title": "02 Quality Control",
    "section": "\nnFeature_RNA Gene counts per cell",
    "text": "nFeature_RNA Gene counts per cell\nWe look at nFeature_RNA for gene counts per cell. Generally, we expect a valid cell with at least 300 genes.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  geom_vline(xintercept = 300) +\n  ggtitle(\"nFeature_RNA\")"
  },
  {
    "objectID": "02_quality_control.html#percent.mt-mitochondrial-percentage-per-cell",
    "href": "02_quality_control.html#percent.mt-mitochondrial-percentage-per-cell",
    "title": "02 Quality Control",
    "section": "\npercent.mt Mitochondrial percentage per cell",
    "text": "percent.mt Mitochondrial percentage per cell\nWe look at percent.mt for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  geom_vline(xintercept = 25) +\n  ggtitle(\"percent.mt\")"
  },
  {
    "objectID": "02_quality_control.html#combine-metrics-to-come-up-filtering-threthold",
    "href": "02_quality_control.html#combine-metrics-to-come-up-filtering-threthold",
    "title": "02 Quality Control",
    "section": "Combine metrics to come up filtering threthold",
    "text": "Combine metrics to come up filtering threthold\nWe can combine the metrics to decide the filtering threshold.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nThe data is fitted with a regression line. We expect when UMI counts increase, gene counts also increase.\nUpper right quadrant: Cells with high number of genes and UMI counts. We generally consider these cells to be good-quality cells.\nBottom right quadrant: Cells with low number of genes and UMI counts. We generally consider these cells are low-quality cells.\nDarker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts. This could indicate damaged/dying cells whose cytoplasmic mRNA has leaked out through a broken membrane; therefore, only mRNA located in the mitochondria is still conserved."
  },
  {
    "objectID": "02_quality_control.html#filter-on-cells",
    "href": "02_quality_control.html#filter-on-cells",
    "title": "02 Quality Control",
    "section": "Filter on cells",
    "text": "Filter on cells\nBased on the quality metrics, we use the following thresholds to filter out low quality cells:\nnCount_RNA &gt; 500 nFeature_RNA &gt; 300 nFeature_RNA &lt; 5000 percent.mt &lt; 25%\n\nfiltered.seuratObj &lt;- subset(x = seuratObj, \n                             subset = (nCount_RNA &gt;= 500) & \n                               (nFeature_RNA &gt;= 300) &\n                               (nFeature_RNA &lt;= 5000) &\n                               (percent.mt &lt; 25))"
  },
  {
    "objectID": "02_quality_control.html#filter-on-genes",
    "href": "02_quality_control.html#filter-on-genes",
    "title": "02 Quality Control",
    "section": "Filter on genes",
    "text": "Filter on genes\nSome of the genes have zero counts or are only expressed in a handful of cells. These genes don’t bring much information, and they reduce the average expression of a cell.\nWe keep only genes that are expressed in five or more cells. GetAssayData is a convenient command to get information from the Seurat object. We use GetAssayData to extract the UMI counts.\n\n# Extract counts\ncounts &lt;- GetAssayData(object = filtered.seuratObj, slot = \"counts\")\n\n# Output a logical matrix specifying for each gene whether or not there are more than zero counts per cell\nnonzero &lt;- counts &gt; 0\n\n# Sum all TRUE values and return TRUE if equal or more than 5 TRUE values per gene\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\n\n# Only keep those genes\nfiltered_counts &lt;- counts[keep_genes, ]\n\n# Create Seurat object\nfiltered.seuratObj &lt;- CreateSeuratObject(filtered_counts, meta.data = filtered.seuratObj@meta.data)\n\n\n\n\n\n\n\nTip\n\n\n\nThe targeted assay contains genes of interest, and these genes typically express in the profiling cells. Therefore, “Filter on genes” is usually not performed on targeted assays."
  }
]